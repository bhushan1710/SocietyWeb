import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:society_app/SocietyApp/screens/booked_Amenities.dart';
import 'package:society_app/SocietyApp/screens/helpdesk.dart';
import 'package:society_app/SocietyApp/screens/home_screen.dart';
import 'package:society_app/SocietyApp/screens/notification.dart';
import 'package:society_app/SocietyApp/screens/payment.dart';
import 'package:society_app/SocietyApp/screens/profile_screen.dart';
import 'package:society_app/SocietyApp/screens/visitor_mgmt.dart';
import 'package:society_app/domain/models/basicinfo.dart';
import 'package:society_app/presentation/providers/viewModel_provider.dart';

class AnimatedBottomNavScreen extends ConsumerStatefulWidget {
   final int initialIndex;
  const AnimatedBottomNavScreen({super.key, this.initialIndex = 0});

  @override
  ConsumerState<AnimatedBottomNavScreen> createState() => _AnimatedBottomNavScreenState();
}

class _AnimatedBottomNavScreenState extends ConsumerState<AnimatedBottomNavScreen>
    with TickerProviderStateMixin {
  
  // Animation Controllers
  late AnimationController _mainAnimationController;
  late AnimationController _tapAnimationController;
  
  // Individual tab animation controllers
  final List<AnimationController> _tabAnimationControllers = [];
  final List<Animation<double>> _tabScaleAnimations = [];
  
  // State
  int _currentIndex = 0;
  final PageController _pageController = PageController();

  @override
  void initState() {
    super.initState();
   
      _initializeAnimations();
      
    
    // ref.read(basicInfoViewModelProvider.notifier).getBasicInfo();
  WidgetsBinding.instance.addPostFrameCallback((_) {
  _onTabTapped(widget.initialIndex);
  });
  }

  void _initializeAnimations() {
    // Main animation controller for bottom nav appearance
    //  _currentIndex = widget.initialIndex; // use passed index
    _mainAnimationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1500),
    );
    // General tap animation controller
    _tapAnimationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 150),
    );

    // Initialize individual tab animation controllers
    for (int i = 0; i < 5; i++) {
      final controller = AnimationController(
        vsync: this,
        duration: const Duration(milliseconds: 200),
      );
      
      final animation = Tween<double>(
        begin: 1.0,
        end: 1.2,
      ).animate(CurvedAnimation(
        parent: controller,
        curve: Curves.elasticOut,
      ));

      _tabAnimationControllers.add(controller);
      _tabScaleAnimations.add(animation);
    }

    // Start the main animation
    _mainAnimationController.forward();
  }

  @override
  void dispose() {
    _mainAnimationController.dispose();
    _tapAnimationController.dispose();
    for (var controller in _tabAnimationControllers) {
      controller.dispose();
    }
    _pageController.dispose();
    super.dispose();
  }

  // Animate only the selected tab
  void _animateSelectedTab(int index) {
    _tabAnimationControllers[index].forward().then((_) {
      _tabAnimationControllers[index].reverse();
    });
  }

  // Handle tab change without slide animation
  void _onTabTapped(int index) {
    if (index == _currentIndex) return;

    HapticFeedback.lightImpact();
    
    // Animate only the tapped tab
    _animateSelectedTab(index);
    
    setState(() {
      _currentIndex = index;
    });

    // Jump to page without animation for instant switching
    _pageController.jumpToPage(index);

    // Handle navigation based on index
    _handleNavigation(index);
  }

  void _handleNavigation(int index) {
    switch (index) {
      case 0:
        HomeScreen();
        break;
      case 1:
       HelpDeskScreen();
      case 2:
       VisitorManagementScreen();
      case 3:
        PaymentScreen();
      case 4:
       BookedAmenitiesScreen();
    }
  }

  void _onPageChanged(int index) {
    if (index != _currentIndex) {
      setState(() {
        _currentIndex = index;
      });
    }
  }



 PreferredSizeWidget buildAppBar() {
     final basicInfo = ref.watch(basicInfoViewModelProvider);
     final residentName = basicInfo.name;
     final unit = basicInfo.unit;
    // final residentName =
    //     ref.read(basicInfoViewModelProvider).name ?? 'Resident';
    // final unit = ref.read(basicInfoViewModelProvider).unit ?? 'Unknown Unit
    return AppBar(
      backgroundColor:const Color(0xFF000C33),
      elevation: 0,
      toolbarHeight: 70,
      title: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
  'Hello, ${residentName ?? 'Loading...'}', // placeholder until data arrives
  style: const TextStyle(
    fontWeight: FontWeight.w600,
    fontSize: 14,
    color: Colors.white,
  ),
),
          GestureDetector(
            onTap: () {
              // Handle unit switching
              _showUnitSwitchDialog(context);
            },
            child: Row(
              children: [
                Text(
                  unit??'Loading...', // placeholder until data arrives
                  style: const TextStyle(fontSize: 10, color: Colors.white70),
                ),
                const SizedBox(width: 4),
                const Icon(
                  Icons.keyboard_arrow_down,
                  size: 18,
                  color: Colors.white70,
                ),
              ],
            ),
          ),
        ],
      ),
      actions: [
        Stack(
          children: [
            IconButton(
              icon: const Icon(
                Icons.notifications_outlined,
                color: Colors.white,
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => NotificationScreen(
                      societyId:
                          ref.read(basicInfoViewModelProvider).societyID ?? '',
                      ownerId:
                          ref.read(basicInfoViewModelProvider).ownerId ?? 0,
                    ),
                  ),
                );
              },
            ),
            Positioned(
              right: 8,
              top: 8,
              child: TweenAnimationBuilder<double>(
                tween: Tween<double>(begin: 0, end: 1),
                duration: const Duration(milliseconds: 1000),
                builder: (context, value, child) {
                  return Transform.scale(
                    scale: value,
                    child: Container(
                      padding: const EdgeInsets.all(3),
                      decoration: const BoxDecoration(
                        color: Color.fromARGB(255, 255, 0, 0),
                        shape: BoxShape.circle,
                      ),
                      child: const Text(
                        '2',
                        style: TextStyle(fontSize: 10, color: Colors.white),
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
        GestureDetector(
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => ProfileScreen()),
            );
          },
          // child:  _buildProfileAvatar(basicInfo),
          // child: const Padding(
          //   padding: EdgeInsets.only(right: 16.0),
          //   child: CircleAvatar(
          //     radius: 18,
          //     backgroundColor: Colors.white24,
          //     child: Icon(Icons.person_4_sharp, color: Colors.white),
          //   ),
          // ),

        ),
      ],
    );
 
  }
  
Widget _buildProfileAvatar(List<BasicInfo> list) {
final user=list.first;
  final hasDbImage = user.profileImage != null && user.profileImage!.isNotEmpty;
  if (hasDbImage) {
    return ClipOval(
      child: Image.network(
        user.profileImage!,
        width: 96,
        height: 96,
        fit: BoxFit.cover,
        loadingBuilder: (context, child, loadingProgress) {
          if (loadingProgress == null) return child;
          return Container(
            width: 96,
            height: 96,
            alignment: Alignment.center,
            child: const CircularProgressIndicator(strokeWidth: 2),
          );
        },
        errorBuilder: (context, error, stackTrace) {
          return CircleAvatar(
            radius: 48,
            backgroundColor: Colors.blue[400],
            child: Text(
              user.name?.isNotEmpty == true
                  ? user.name!.substring(0, 1).toUpperCase()
                  : '',
              style: const TextStyle(
                color: Colors.white,
                fontSize: 30,
                fontWeight: FontWeight.bold,
              ),
            ),
          );
        },
      ),
    );
  }

  // fallback â†’ no picked image and no DB image
  return CircleAvatar(
    radius: 48,
    backgroundColor: Colors.blue[400],
    child: Text(
      user.name?.isNotEmpty == true
          ? user.name!.substring(0, 1).toUpperCase()
          : 'U',
      style: const TextStyle(
        color: Colors.white,
        fontSize: 36,
        fontWeight: FontWeight.bold,
      ),
    ),
  );
}
  
  void _showUnitSwitchDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          backgroundColor: Colors.white,
          title: const Text('Switch Unit'),
          content: const Text(
            'Unit switching functionality is not implemented yet.',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Close'),
            ),
          ],
        );
      },
    );
  }

  

  Widget _buildAnimatedBottomNav() {
    return SlideTransition(
      position: Tween<Offset>(
        begin: const Offset(0, 1),
        end: Offset.zero,
      ).animate(
        CurvedAnimation(
          parent: _mainAnimationController,
          curve: const Interval(0.8, 1.0, curve: Curves.elasticOut),
        ),
      ),
      child: Container(
        decoration: BoxDecoration(
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 20,
              offset: const Offset(0, -5),
            ),
          ],
        ),
        child: BottomNavigationBar(
          currentIndex: _currentIndex,
          type: BottomNavigationBarType.fixed,
          backgroundColor: Colors.white,
          selectedItemColor: const Color(0xFF2E3B62),
          unselectedItemColor: Colors.grey,
          elevation: 0,
          selectedFontSize: 12,
          unselectedFontSize: 10,
          items: [
            _buildAnimatedBottomNavItem(Icons.home, 'Home', 0),
            _buildAnimatedBottomNavItem(Icons.headset_mic, 'Helpdesk', 1),
            _buildAnimatedBottomNavItem(Icons.people, 'Visitors', 2),
            _buildAnimatedBottomNavItem(Icons.account_balance_wallet, 'Dues', 3),
            _buildAnimatedBottomNavItem(Icons.pool, 'Amenties', 4),
          ],
          onTap: _onTabTapped,
        ),
      ),
    );
  }

  BottomNavigationBarItem _buildAnimatedBottomNavItem(
    IconData icon, 
    String label, 
    int index
  ) {
    final isSelected = _currentIndex == index;
    
    return BottomNavigationBarItem(
      icon: AnimatedBuilder(
        animation: _tabScaleAnimations[index],
        builder: (context, child) {
          return Transform.scale(
            scale: _tabScaleAnimations[index].value,
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 200),
              curve: Curves.easeInOut,
              padding: EdgeInsets.all(isSelected ? 8 : 4),
              decoration: BoxDecoration(
                color: isSelected 
                  ? const Color(0xFF2E3B62).withOpacity(0.1) 
                  : Colors.transparent,
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                icon,
                size: isSelected ? 26 : 22,
              ),
            ),
          );
        },
      ),
      label: label,
    );
  }

  @override
  Widget build(BuildContext context) {
     final List<Widget> screens = [
      const HomeScreen(),
      HelpDeskScreen(),
      VisitorManagementScreen(),
      const PaymentScreen(),
      const BookedAmenitiesScreen(),
    ];
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar:  buildAppBar(),
      body: PageView(
        controller: _pageController,
        onPageChanged: _onPageChanged,
        children: screens,
      ),
      bottomNavigationBar: _buildAnimatedBottomNav(),
    );
  }
  
}